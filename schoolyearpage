import { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { Button, Card, Col, Flex, Popconfirm, Row, notification } from "antd";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPlus } from "@fortawesome/pro-regular-svg-icons";

import { GET, POST } from "../../../../providers/useAxiosQuery";
import {
    TableGlobalSearchAnimated,
    TablePageSize,
    TablePagination,
    TableShowingEntriesV2,
    useTableScrollOnTop,
} from "../../../../providers/CustomTableFilter";
import notificationErrors from "../../../../providers/notificationErrors";
import TableSchoolYear from "./components/TableSchoolYear";
import ModalSchoolYear from "./components/ModalSchoolYear";

export default function PageSchoolYear() {
    const location = useLocation();

    const [selectedRowKeys, setSelectedRowKeys] = useState([]);
    const [toggleModalSchoolYear, setToggleModalSchoolYear] = useState({
        open: false,
        data: null,
    });

    const [tableFilter, setTableFilter] = useState({
        page: 1,
        page_size: 25,
        search: "",
        sort_field: "sy_from",
        sort_order: "asc",
        isTrash: 0,
    });

    const { data: dataSchoolYear, refetch: refetchSchoolYear } = GET(
        `api/school_year?${new URLSearchParams(tableFilter)}`,
        "school_year_list"
    );

    useEffect(() => {
        refetchSchoolYear();

        return () => {};
    }, [tableFilter]);

    const onChangeTable = (pagination, filters, sorter) => {
        console.log("pagination, filters, sorter", pagination, filters, sorter);
        setTableFilter((ps) => ({
            ...ps,
            sort_field: sorter.columnKey ? sorter.columnKey : "",
            sort_order: sorter.order ? sorter.order.replace("end", "") : "",
            page: 1,
            // status: "Active",
        }));
    };

    const {
        mutate: mutateDeleteSchoolYear,
        isLoading: isLoadingDeleteSchoolYear,
    } = POST(`api/school_year_archived`, "school_year_list");

    const handleSelectedArchived = () => {
        let data = {
            isTrash: tableFilter.isTrash,
            ids: selectedRowKeys,
        };

        mutateDeleteSchoolYear(data, {
            onSuccess: (res) => {
                if (res.success) {
                    notification.success({
                        message: "School Year",
                        description: res.message,
                    });
                    setSelectedRowKeys([]);
                } else {
                    notification.error({
                        message: "School Year",
                        description: res.message,
                    });
                }
            },
            onError: (err) => {
                notificationErrors(err);
            },
        });
    };

    useTableScrollOnTop("tbl20", location);

    return (
        <Row gutter={[12, 12]}>
            <Col xs={24} sm={24} md={24} lg={24} xl={24} xxl={24}>
                <Button
                    className="btn-main-primary btn-add"
                    icon={<FontAwesomeIcon icon={faPlus} />}
                    onClick={() =>
                        setToggleModalSchoolYear({
                            open: true,
                            data: null,
                        })
                    }
                >
                    Add School Year
                </Button>
            </Col>

            <Col xs={24} sm={24} md={24} lg={24} xl={24} xxl={24}>
                <div className="tbl-top-filter">
                    <Flex gap={10}>
                        <Button
                            className={`btn-main-primary min-w-150 ${
                                tableFilter.isTrash === 0
                                    ? "active"
                                    : "outlined"
                            }`}
                            onClick={() => {
                                setTableFilter((ps) => ({
                                    ...ps,
                                    isTrash: 0,
                                }));
                                setSelectedRowKeys([]);
                            }}
                        >
                            Active
                        </Button>

                        <Button
                            className={`btn-main-primary min-w-150 ${
                                tableFilter.isTrash === 1
                                    ? "active"
                                    : "outlined"
                            }`}
                            onClick={() => {
                                setTableFilter((ps) => ({
                                    ...ps,
                                    isTrash: 1,
                                }));
                                setSelectedRowKeys([]);
                            }}
                        >
                            Archived
                        </Button>

                        <TableGlobalSearchAnimated
                            tableFilter={tableFilter}
                            setTableFilter={setTableFilter}
                        />

                        {selectedRowKeys.length > 0 && (
                            <Popconfirm
                                title={
                                    <>
                                        Are you sure you want to
                                        <br />
                                        {tableFilter.isTrash === 0
                                            ? "archive"
                                            : "activate"}{" "}
                                        the selected{" "}
                                        {selectedRowKeys.length > 1
                                            ? "School Years"
                                            : "School Year"}
                                        ?
                                    </>
                                }
                                okText="Yes"
                                cancelText="No"
                                onConfirm={() => {
                                    handleSelectedArchived();
                                }}
                            >
                                <Button
                                    className={
                                        tableFilter.isTrash === 0
                                            ? "btn-main-tertiary"
                                            : "btn-success"
                                    }
                                    name="btn_active_archive"
                                    loading={isLoadingDeleteSchoolYear}
                                >
                                    {tableFilter.isTrash === 0
                                        ? "ARCHIVE"
                                        : "ACTIVATE"}{" "}
                                    SELECTED
                                </Button>
                            </Popconfirm>
                        )}
                    </Flex>

                    <Flex gap={10}>
                        <TableShowingEntriesV2 />

                        <TablePageSize
                            tableFilter={tableFilter}
                            setTableFilter={setTableFilter}
                        />
                    </Flex>
                </div>
            </Col>

            <Col xs={24} sm={24} md={24} lg={24} xl={24} xxl={24}>
                <TableSchoolYear
                    dataSource={
                        dataSchoolYear && dataSchoolYear.data
                            ? dataSchoolYear.data.data
                            : []
                    }
                    onChangeTable={onChangeTable}
                    setToggleModalSchoolYear={setToggleModalSchoolYear}
                    selectedRowKeys={selectedRowKeys}
                    setSelectedRowKeys={setSelectedRowKeys}
                />
            </Col>

            <Col xs={24} sm={24} md={24} lg={24} xl={24} xxl={24}>
                <div className="tbl-bottom-filter">
                    <TableShowingEntriesV2 />
                    <TablePagination
                        tableFilter={tableFilter}
                        setTableFilter={setTableFilter}
                        total={
                            dataSchoolYear &&
                            dataSchoolYear.data &&
                            dataSchoolYear.data.total > 0
                                ? dataSchoolYear.data.total
                                : 0
                        }
                        showLessItems={true}
                        showSizeChanger={false}
                        tblWrapper="tbl_wrapper"
                    />
                </div>
            </Col>

            <ModalSchoolYear
                toggleModalSchoolYear={toggleModalSchoolYear}
                setToggleModalSchoolYear={setToggleModalSchoolYear}
            />
        </Row>
    );
}
